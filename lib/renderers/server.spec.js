// Generated by CoffeeScript 2.2.3
(function() {
  var FakePromise, Layout, React, Root, Route, ServerRenderer, createPage, elem, locals, model;

  React = require("react");

  ({FakePromise} = require("fake-promise"));

  model = require("../model");

  ({Route} = require("react-router-dom"));

  ({ServerRenderer} = require("./server"));

  elem = function(tag, ...children) {
    return React.createElement(tag, {
      children: children
    });
  };

  Root = class Root extends React.Component {
    render() {
      return elem("html", elem("head", elem("title", `${this.props.page.title} | ${this.props.paramorph.config.title}`)), elem("body", "%%%BODY%%%"));
    }

  };

  Layout = class Layout extends React.Component {
    render() {
      return elem("div", elem("p", this.props.page.title));
    }

  };

  createPage = function(url, title, date) {
    return new model.Page(url, title, "", null, "test", "test", "./test.md", true, true, [], [], date);
  };

  locals = {
    webpackStats: {
      compilation: {
        assets: {
          "bundle.css": {},
          "bundle.js": {}
        }
      }
    }
  };

  describe("ServerRenderer", function() {
    var testedRenderer;
    testedRenderer = null;
    beforeEach(function() {
      return testedRenderer = new ServerRenderer(Root);
    });
    return it("renders single page", function() {
      var actionPromise, layout, layoutPromise, page, pagePromise, paramorph, resultPromise, route;
      page = createPage("/", "Meeting", 0);
      layout = new model.Layout("test", "./layouts/test.md");
      layoutPromise = new FakePromise;
      pagePromise = new FakePromise;
      paramorph = new model.Paramorph({
        title: "website.test"
      });
      paramorph.addLayout(layout);
      paramorph.addPage(page);
      actionPromise = new FakePromise;
      route = {
        path: page.url,
        action: function() {
          return actionPromise;
        }
      };
      resultPromise = testedRenderer.render(locals, paramorph, [route]);
      actionPromise.resolve(React.createElement(Layout, {
        page: page
      }));
      return resultPromise.then(function(result) {
        (Object.keys(result)).should.eql(["/"]);
        return result["/"].should.equal("" + "<!DOCTYPE html>\n" + "<html>" + "<head><title>Meeting | website.test</title></head>" + "<body><div data-reactroot=\"\"><p>Meeting</p></div></body>" + "</html>");
      });
    });
  });

}).call(this);

//# sourceMappingURL=server.spec.js.map
