// Generated by CoffeeScript 2.3.2
(function() {
  var FakePromise, Layout, PropTypes, React, Root, ServerRenderer, createPage, elem, model, sinon;

  React = require("react");

  PropTypes = require("prop-types");

  sinon = require("sinon");

  ({FakePromise} = require("fake-promise"));

  model = require("../model");

  ({ServerRenderer} = require("./server"));

  elem = function(tag, ...children) {
    return React.createElement(tag, {
      children: children
    });
  };

  Root = class Root extends React.Component {
    render() {
      return elem("html", elem("head", elem("title", `${this.props.page.title} | ${this.props.paramorph.config.title}`)), elem("body", "%%%BODY%%%"));
    }

  };

  Layout = (function() {
    class Layout extends React.Component {
      render() {
        return elem("div", elem("p", this.context.page.title));
      }

    };

    Layout.contextTypes = {
      page: PropTypes.object
    };

    return Layout;

  }).call(this);

  createPage = function(url, title, date) {
    return new model.Page(url, title, "", null, "test", "test", "./test.md", true, true, [], [], date);
  };

  describe("ServerRenderer", function() {
    var router, testedRenderer;
    router = null;
    testedRenderer = null;
    beforeEach(function() {
      var history, layout, page, paramorph;
      page = createPage("/", "Meeting", 0);
      layout = new model.Layout("test", "./layouts/test.md");
      paramorph = new model.Paramorph({
        title: "website.test"
      });
      paramorph.addLayout(layout);
      paramorph.addPage(page);
      history = {};
      router = {
        resolve: sinon.stub()
      };
      return testedRenderer = new ServerRenderer(history, router, paramorph);
    });
    return describe("after calling render", function() {
      var resultPromise, routerPromise;
      routerPromise = null;
      resultPromise = null;
      beforeEach(function() {
        var locals, webpackStats;
        locals = {
          Root: Root
        };
        webpackStats = {
          compilation: {
            assets: {
              "bundle.css": {},
              "bundle.js": {}
            }
          }
        };
        routerPromise = new FakePromise;
        router.resolve.returns(routerPromise);
        resultPromise = testedRenderer.render(locals, webpackStats);
        return void 0;
      });
      return describe("and after resoling router promise", function() {
        beforeEach(function() {
          return routerPromise.resolve(React.createElement(Layout));
        });
        return it("renders single page", function() {
          return resultPromise.then(function(result) {
            (Object.keys(result)).should.eql(["/"]);
            return result["/"].should.equal("" + "<!DOCTYPE html>\n" + "<html>" + "<head><title>Meeting | website.test</title></head>" + "<body><div data-reactroot=\"\"><p>Meeting</p></div></body>" + "</html>");
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=server.spec.js.map
