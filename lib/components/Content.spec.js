// Generated by CoffeeScript 2.2.1
(function() {
  var ContentLimiter, React, ReactDOMServer, TestComponent, elem, key, sinon;

  React = require("react");

  ReactDOMServer = require("react-dom/server");

  sinon = require("sinon");

  ContentLimiter = require("./Content").default;

  key = 0;

  elem = function(name, ...children) {
    return React.createElement(name, {
      key: key++
    }, children.length === 0 ? void 0 : children.length === 1 ? children[0] : children);
  };

  TestComponent = class TestComponent extends React.Component {
    render() {
      return React.createElement("div", {
        className: "test"
      }, this.props.children);
    }

  };

  describe("Content", function() {
    var limitTests, props, renderingTests, testedContent;
    props = null;
    testedContent = null;
    beforeEach(function() {
      return props = {
        limit: 1,
        respectLimit: true,
        test: true
      };
    });
    renderingTests = [["empty div", elem("div"), "<div></div>"], ["a paragraph", elem("p", "Lorem ipsum dolor sit amet."), "<p>Lorem ipsum dolor sit amet.</p>"], ["react component without children", elem(TestComponent), "<div class=\"test\"></div>"], ["react component with children", elem(TestComponent, elem("p", "Luke, I'm your father.")), "<div class=\"test\"><p>Luke, I&#x27;m your father.</p></div>"]];
    renderingTests.forEach(function(params) {
      var children, expectedResult, testName;
      [testName, children, expectedResult] = params;
      return it(`renders ${testName}`, function() {
        var limited;
        testedContent = React.createElement(ContentLimiter, props, children);
        limited = `<div class="content">${expectedResult}</div>`;
        return ReactDOMServer.renderToStaticMarkup(testedContent).should.equal(limited);
      });
    });
    limitTests = [["two sentences", [elem("p", elem("b", "Ignorance"), " is a lack of ", elem("a", "knowledge"), ". "), "Knowledge is a lack of ignorance."], "<p><b>Ignorance</b> is a lack of <a>knowledge</a>.</p>"], ["images", elem("div", elem("img"), elem("img"), elem("img")), "<div></div>"]];
    limitTests.forEach(function(params) {
      var children, expectedResult, testName;
      [testName, children, expectedResult] = params;
      return describe(`when limiting ${testName}`, function() {
        beforeEach(function() {
          return testedContent = React.createElement(ContentLimiter, props, children);
        });
        return it("renders limited children", function() {
          var limited;
          limited = `<div class="content">${expectedResult}</div>`;
          return ReactDOMServer.renderToStaticMarkup(testedContent).should.equal(limited);
        });
      });
    });
    return describe("with mapper configured", function() {
      var mapper;
      mapper = null;
      testedContent = null;
      beforeEach(function() {
        mapper = sinon.spy(function(node) {
          return elem("strong", "mapped");
        });
        return props = Object.assign({mapper}, props);
      });
      it("maps root component", function() {
        var children, markup;
        children = elem("p", "root");
        testedContent = React.createElement(ContentLimiter, props, children);
        markup = ReactDOMServer.renderToStaticMarkup(testedContent);
        return markup.should.equal("<div class=\"content\"><strong>mapped</strong></div>");
      });
      it("maps children with mapper before parents", function() {
        var children;
        children = elem("p", elem("b", "Ignorance"), " is a lack of elem knowledge.");
        testedContent = React.createElement(ContentLimiter, props, children);
        ReactDOMServer.renderToStaticMarkup(testedContent);
        mapper.getCall(0).args[0].type.should.equal("b");
        return mapper.getCall(1).args[0].type.should.equal("p");
      });
      return it("maps components after limiting", function() {
        var children;
        children = elem("p", ".", elem("b", "To be limited"), ".");
        testedContent = React.createElement(ContentLimiter, props, children);
        ReactDOMServer.renderToStaticMarkup(testedContent);
        return mapper.should.have.callCount(1);
      });
    });
  });

}).call(this);

//# sourceMappingURL=Content.spec.js.map
