// Generated by CoffeeScript 2.2.3
(function() {
  var FakeFileSystem, ProjectStructure;

  FakeFileSystem = require("../platform/fake/FileSystem").FakeFileSystem;

  ProjectStructure = require("./ProjectStructure").ProjectStructure;

  describe("ProjectStructure", function() {
    var fs, testedStructure;
    fs = null;
    testedStructure = null;
    beforeEach(function() {
      fs = new FakeFileSystem;
      testedStructure = new ProjectStructure(fs);
      return fs.createDir(".");
    });
    describe("given empty project folder", function() {
      beforeEach(function() {
        return fs.createDir(".");
      });
      return it(".scan() complains about lack of _layouts folder", function() {
        return testedStructure.scan({
          collections: {}
        }).then(function(result) {
          throw new Error(`expected an error; got result ${result}`);
        }).catch(function(err) {
          return err.should.eql(new Error("couldn't find ./_layouts folder"));
        });
      });
    });
    describe("given project with only _layouts folder", function() {
      beforeEach(function() {
        fs.createDir(".");
        return fs.createDir("./_layouts");
      });
      return it(".scan() complains about lack of _includes folder", function() {
        return testedStructure.scan({
          collections: {}
        }).then(function(result) {
          throw new Error(`expected an error; got result ${result}`);
        }).catch(function(err) {
          return err.should.eql(new Error("couldn't find ./_includes folder"));
        });
      });
    });
    describe("given project with empty _layouts and _includes folders", function() {
      beforeEach(function() {
        fs.createDir(".");
        fs.createDir("./_layouts");
        return fs.createDir("./_includes");
      });
      it(".scan() produces empty specialDirs", function() {
        return testedStructure.scan({
          collections: {}
        }).then(function(result) {
          return result.should.eql({
            layouts: [],
            includes: [],
            collections: {
              $root: []
            }
          });
        });
      });
      it(".scan() doesn't throw when encountering collection without its folder", function() {
        return testedStructure.scan({
          collections: {
            nonexistent: {}
          }
        });
      });
      return ['layouts', 'includes', '$root'].forEach(function(forbiddenName) {
        return it(`.scan() complains about collection named '${forbiddenName}'`, function() {
          var collections;
          collections = {};
          collections[forbiddenName] = {};
          return testedStructure.scan({collections}).then(function(result) {
            throw new Error(`expected an error; got result ${result}`);
          }).catch(function(err) {
            return err.should.eql(new Error(`collection name forbidden: '${forbiddenName}'`));
          });
        });
      });
    });
    describe("given project with some layout files", function() {
      beforeEach(function() {
        fs.createDir(".");
        fs.createDir("./_layouts");
        fs.createDir("./_includes");
        fs.writeFile("./_layouts/js.js");
        fs.writeFile("./_layouts/ts.ts");
        fs.createDir("./_layouts/sub-js");
        fs.writeFile("./_layouts/sub-js/index.js");
        fs.createDir("./_layouts/sub-ts");
        return fs.writeFile("./_layouts/sub-ts/index.ts");
      });
      return it(".scan() produces specialDirs containing all layouts", function() {
        var expectedLayouts;
        expectedLayouts = [
          {
            name: "js",
            path: "./_layouts/js.js"
          },
          {
            name: "sub-js",
            path: "./_layouts/sub-js/index.js"
          },
          {
            name: "sub-ts",
            path: "./_layouts/sub-ts/index.ts"
          },
          {
            name: "ts",
            path: "./_layouts/ts.ts"
          }
        ];
        return testedStructure.scan({
          collections: {}
        }).then(function(result) {
          return result.should.eql({
            layouts: expectedLayouts,
            includes: [],
            collections: {
              $root: []
            }
          });
        });
      });
    });
    describe("given project with layout of 2 index files", function() {
      beforeEach(function() {
        fs.createDir(".");
        fs.createDir("./_layouts");
        fs.createDir("./_includes");
        fs.createDir("./_layouts/sub");
        fs.writeFile("./_layouts/sub/index.js");
        return fs.writeFile("./_layouts/sub/index.ts");
      });
      return it(".scan() produces specialDirs containing all layouts", function() {
        return testedStructure.scan({
          collections: {}
        }).then(function(result) {
          throw new Error(`expected an error; got result ${result}`);
        }).catch(function(err) {
          return err.should.eql(new Error("multiple index files found in subfolder: ./_layouts/sub: index.js,index.ts"));
        });
      });
    });
    describe("given project with some includes", function() {
      beforeEach(function() {
        fs.createDir(".");
        fs.createDir("./_layouts");
        fs.createDir("./_includes");
        fs.writeFile("./_includes/js.js");
        fs.writeFile("./_includes/ts.ts");
        fs.createDir("./_includes/sub-js");
        fs.writeFile("./_includes/sub-js/index.js");
        fs.createDir("./_includes/sub-ts");
        return fs.writeFile("./_includes/sub-ts/index.ts");
      });
      return it(".scan() produces specialDirs containing all includes", function() {
        var expectedIncludes;
        expectedIncludes = [
          {
            name: "js",
            path: "./_includes/js.js"
          },
          {
            name: "sub-js",
            path: "./_includes/sub-js/index.js"
          },
          {
            name: "sub-ts",
            path: "./_includes/sub-ts/index.ts"
          },
          {
            name: "ts",
            path: "./_includes/ts.ts"
          }
        ];
        return testedStructure.scan({
          collections: {}
        }).then(function(result) {
          return result.should.eql({
            layouts: [],
            includes: expectedIncludes,
            collections: {
              $root: []
            }
          });
        });
      });
    });
    describe("given project with some markdown files in root folder", function() {
      beforeEach(function() {
        fs.createDir(".");
        fs.createDir("./_layouts");
        fs.createDir("./_includes");
        fs.writeFile("./index.markdown");
        fs.writeFile("./sitemap.markdown");
        fs.writeFile("./about.markdown");
        return fs.writeFile("./404.markdown");
      });
      return it(".scan() produces specialDirs containing markdown files in $root collection", function() {
        var expectedFiles;
        expectedFiles = [
          {
            name: "404",
            path: "./404.markdown"
          },
          {
            name: "about",
            path: "./about.markdown"
          },
          {
            name: "index",
            path: "./index.markdown"
          },
          {
            name: "sitemap",
            path: "./sitemap.markdown"
          }
        ];
        return testedStructure.scan({
          collections: {}
        }).then(function(result) {
          return result.should.eql({
            layouts: [],
            includes: [],
            collections: {
              $root: expectedFiles
            }
          });
        });
      });
    });
    return describe("given project with some markdown files in _posts folder", function() {
      beforeEach(function() {
        fs.createDir(".");
        fs.createDir("./_layouts");
        fs.createDir("./_includes");
        fs.createDir("./_posts");
        fs.writeFile("./_posts/2007-06-01-hello-world.markdown");
        return fs.writeFile("./_posts/2018-03-21-need-to-blog-more-often.markdown");
      });
      return it(".scan() produces specialDirs containing markdown files in _posts collection", function() {
        var expectedFiles;
        expectedFiles = [
          {
            name: "2007-06-01-hello-world",
            path: "./_posts/2007-06-01-hello-world.markdown"
          },
          {
            name: "2018-03-21-need-to-blog-more-often",
            path: "./_posts/2018-03-21-need-to-blog-more-often.markdown"
          }
        ];
        return testedStructure.scan({
          collections: {
            posts: {}
          }
        }).then(function(result) {
          return result.should.eql({
            layouts: [],
            includes: [],
            collections: {
              $root: [],
              posts: expectedFiles
            }
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=ProjectStructure.spec.js.map
