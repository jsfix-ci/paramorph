// Generated by CoffeeScript 2.2.3
(function() {
  var FakeFileSystem, FrontMatter, source;

  FakeFileSystem = require("../platform/fake/FileSystem").default;

  FrontMatter = require("./FrontMatter").default;

  source = {
    path: 'file.markdown'
  };

  describe("FrontMatter,", function() {
    var fileSystem, testedFrontMatter;
    fileSystem = null;
    testedFrontMatter = null;
    beforeEach(function() {
      fileSystem = new FakeFileSystem;
      return testedFrontMatter = new FrontMatter(fileSystem);
    });
    describe("when source file is not existent", function() {
      return it("throws when reading a source file", function() {
        return testedFrontMatter.read(source).then(function(result) {
          throw new Error(`expected rejection; got result ${result}`);
        }, function(error) {
          return error.should.eql(new Error("no such file or directory: file.markdown"));
        });
      });
    });
    describe("when source file is empty", function() {
      beforeEach(function() {
        return fileSystem.writeFile(source.path, '');
      });
      return it("throws when reading a source file", function() {
        return testedFrontMatter.read(source).then(function(result) {
          throw new Error(`expected rejection; got result ${result}`);
        }, function(error) {
          return error.should.eql(new Error(`Couldn't find front matter data at the beginning of ${source.path}; expected '---\\n'; got ''.`));
        });
      });
    });
    describe("when source doesn't have closing front-matter delimiter", function() {
      beforeEach(function() {
        return fileSystem.writeFile(source.path, '---\n\n');
      });
      return it("throws when reading a source file", function() {
        return testedFrontMatter.read(source).then(function(result) {
          throw new Error(`expected rejection; got result ${result}`);
        }, function(error) {
          return error.should.eql(new Error(`Couldn't find end of front matter data in first 2048 bytes of ${source.path}.`));
        });
      });
    });
    describe("when source front-matter containes invalid yaml", function() {
      beforeEach(function() {
        return fileSystem.writeFile(source.path, '---\n%#@$#$@L>><\n---\n');
      });
      return it("throws when reading a source file", function() {
        return testedFrontMatter.read(source).then(function(result) {
          throw new Error(`expected rejection; got result ${result}`);
        }, function(error) {
          return error.name.should.equal("YAMLException");
        });
      });
    });
    return describe("when source front-matter contains valid yaml", function() {
      beforeEach(function() {
        return fileSystem.writeFile(source.path, "---\ntable:\n- entry0\n- entry1\n---\n");
      });
      return it("returns parsed front-matter", function() {
        return testedFrontMatter.read(source).then(function(result) {
          return result.should.eql({
            table: ["entry0", "entry1"]
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=FrontMatter.spec.js.map
