// Generated by CoffeeScript 2.2.3
(function() {
  var Loader, sinon;

  sinon = require("sinon");

  Loader = require("./Loader").Loader;

  describe("Loader", function() {
    var mocks, testedLoader;
    mocks = {
      projectStructure: {
        scan: sinon.stub()
      },
      frontMatter: {
        load: sinon.stub()
      }
    };
    testedLoader = null;
    beforeEach(function() {
      return testedLoader = new Loader(mocks.projectStructure, mocks.frontMatter);
    });
    afterEach(function() {
      mocks.projectStructure.scan.resetBehavior();
      mocks.projectStructure.scan.resetHistory();
      mocks.frontMatter.load.resetBehavior();
      return mocks.frontMatter.load.resetHistory();
    });
    return describe('when loading front empty project structure', function() {
      var config, paramorph;
      config = {
        title: 'test',
        timezone: 'UTC',
        collections: [],
        baseUrl: 'http://paramorph.github.io/',
        image: '',
        locale: 'en_US',
        menu: []
      };
      paramorph = null;
      beforeEach(function() {
        mocks.projectStructure.scan.returns({
          layouts: [],
          includes: [],
          collections: []
        });
        return paramorph = testedLoader.load(config);
      });
      return it('.load() returns empty Paramorph instance', function() {
        paramorph.layouts.should.eql([]);
        paramorph.includes.should.eql([]);
        paramorph.pages.should.eql([]);
        paramorph.categories.should.eql([]);
        paramorph.tags.should.eql([]);
        return paramorph.config.should.eql(config);
      });
    });
  });

}).call(this);

//# sourceMappingURL=Loader.spec.js.map
