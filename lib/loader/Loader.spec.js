// Generated by CoffeeScript 2.2.3
(function() {
  var FakePromise, Include, Layout, Loader, sinon;

  sinon = require("sinon");

  FakePromise = require("fake-promise").FakePromise;

  Loader = require("./Loader").Loader;

  ({Layout, Include} = require("../model"));

  describe("Loader", function() {
    var config, mocks, paramorph, testedLoader;
    config = {
      title: 'test',
      timezone: 'UTC',
      collections: [],
      baseUrl: 'http://paramorph.github.io/',
      image: '',
      locale: 'en_US',
      menu: []
    };
    mocks = {
      projectStructure: {
        scan: sinon.stub()
      },
      frontMatter: {
        load: sinon.stub()
      }
    };
    testedLoader = null;
    paramorph = null;
    beforeEach(function() {
      return testedLoader = new Loader(mocks.projectStructure, mocks.frontMatter);
    });
    afterEach(function() {
      mocks.projectStructure.scan.resetBehavior();
      mocks.projectStructure.scan.resetHistory();
      mocks.frontMatter.load.resetBehavior();
      return mocks.frontMatter.load.resetHistory();
    });
    describe('when loading empty project structure', function() {
      var struct;
      struct = {
        layouts: [],
        includes: [],
        collections: []
      };
      beforeEach(async function() {
        mocks.projectStructure.scan.returns(FakePromise.resolve(struct));
        return paramorph = (await testedLoader.load(config));
      });
      return it('.load() returns empty Paramorph instance', function() {
        paramorph.layouts.should.eql({});
        paramorph.includes.should.eql({});
        paramorph.pages.should.eql({});
        paramorph.categories.should.eql({});
        paramorph.tags.should.eql({});
        return paramorph.config.should.eql(config);
      });
    });
    describe('when loading a project structure containing layouts', function() {
      var struct;
      struct = {
        layouts: [
          {
            name: "default",
            path: "./_layouts/default.ts"
          }
        ],
        includes: [],
        collections: []
      };
      beforeEach(async function() {
        mocks.projectStructure.scan.returns(FakePromise.resolve(struct));
        return paramorph = (await testedLoader.load(config));
      });
      return it('.load() returns Paramorph containing layouts', function() {
        Object.keys(paramorph.layouts).should.have.length(1);
        return paramorph.layouts.default.should.eql(new Layout("default", "./_layouts/default.ts"));
      });
    });
    return describe('when loading a project structure containing includes', function() {
      var struct;
      struct = {
        layouts: [],
        includes: [
          {
            name: "Feed",
            path: "./_includes/Feed.ts"
          }
        ],
        collections: []
      };
      beforeEach(async function() {
        mocks.projectStructure.scan.returns(FakePromise.resolve(struct));
        return paramorph = (await testedLoader.load(config));
      });
      return it('.load() returns Paramorph containing includes', function() {
        Object.keys(paramorph.includes).should.have.length(1);
        return paramorph.includes.Feed.should.eql(new Include("Feed", "./_includes/Feed.ts"));
      });
    });
  });

}).call(this);

//# sourceMappingURL=Loader.spec.js.map
