"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
function uneval(paramorph, varName) {
    if (varName === void 0) { varName = 'paramorph'; }
    var pages = [];
    var categories = [];
    var tags = [];
    Object.keys(paramorph.pages)
        .map(function (key) { return paramorph.pages[key]; })
        .forEach(function (page) {
        switch (page.constructor) {
            case __1.Page:
                pages.push(page);
                return;
            case __1.Category:
                categories.push(page);
                return;
            case __1.Tag:
                tags.push(page);
                return;
            default:
                console.warn("found a page of unknown type: " + page.constructor);
                pages.push(page);
                return;
        }
    });
    return "// GENERATED BY PARAMORPH //\n\n// CONFIG //\nconst config = " + JSON.stringify(paramorph.config, null, 2) + ";\n\n// PARAMORPH //\nconst " + varName + " = new Paramorph(config);\n\n// LAYOUTS //\n" + Object.keys(paramorph.layouts)
        .map(function (key) { return paramorph.layouts[key]; })
        .map(function (layout) { return varName + ".addLayout(\n" + unevalLayout(layout) + "\n);\n"; })
        .join('') + "\n// INCLUDES //\n" + Object.keys(paramorph.includes)
        .map(function (key) { return paramorph.includes[key]; })
        .map(function (include) { return varName + ".addInclude(\n" + unevalInclude(include) + "\n);\n"; })
        .join('') + "\n// PAGES //\n" + pages
        .map(function (page) { return varName + ".addPage(\n" + unevalPage(page) + "\n);\n"; })
        .join('') + "\n// CATEGORIES //\n" + categories
        .map(function (category) { return varName + ".addPage(\n" + unevalCategory(category) + "\n);\n"; })
        .join('') + "\n// TAGS //\n" + tags
        .map(function (tag) { return varName + ".addPage(\n" + unevalTag(tag) + "\n);\n"; })
        .join('') + "\n";
}
exports.uneval = uneval;
exports.default = uneval;
function unevalLayout(layout) {
    return "  new Layout(\n    " + JSON.stringify(layout.name) + ",\n    " + JSON.stringify(layout.path) + ",\n  )";
}
exports.unevalLayout = unevalLayout;
function unevalInclude(include) {
    return "  new Include(\n    " + JSON.stringify(include.name) + ",\n    " + JSON.stringify(include.path) + ",\n  )";
}
exports.unevalInclude = unevalInclude;
function unevalPage(page) {
    return "  new Page(\n    " + JSON.stringify(page.url) + ",\n    " + JSON.stringify(page.title) + ",\n    " + JSON.stringify(page.description) + ",\n    " + JSON.stringify(page.image) + ",\n    " + JSON.stringify(page.collection) + ",\n    " + JSON.stringify(page.layout) + ",\n    " + JSON.stringify(page.source) + ",\n    " + JSON.stringify(page.output) + ",\n    " + JSON.stringify(page.feed) + ",\n    " + JSON.stringify(page.categories) + ",\n    " + JSON.stringify(page.tags) + ",\n    " + JSON.stringify(page.timestamp) + ",\n  )";
}
exports.unevalPage = unevalPage;
function unevalCategory(page) {
    return "  new Category(\n    " + JSON.stringify(page.url) + ",\n    " + JSON.stringify(page.title) + ",\n    " + JSON.stringify(page.description) + ",\n    " + JSON.stringify(page.image) + ",\n    " + JSON.stringify(page.collection) + ",\n    " + JSON.stringify(page.layout) + ",\n    " + JSON.stringify(page.source) + ",\n    " + JSON.stringify(page.output) + ",\n    " + JSON.stringify(page.feed) + ",\n    " + JSON.stringify(page.categories) + ",\n    " + JSON.stringify(page.tags) + ",\n    " + JSON.stringify(page.timestamp) + ",\n  )";
}
exports.unevalCategory = unevalCategory;
function unevalTag(page) {
    return "  new Tag(\n    " + JSON.stringify(page.originalTitle) + ",\n    " + JSON.stringify(page.description) + ",\n    " + JSON.stringify(page.image) + ",\n    " + JSON.stringify(page.layout) + ",\n    " + JSON.stringify(page.source) + ",\n    " + JSON.stringify(page.output) + ",\n    " + JSON.stringify(page.timestamp) + ",\n  )";
}
exports.unevalTag = unevalTag;
//# sourceMappingURL=uneval.js.map