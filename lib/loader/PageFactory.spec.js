// Generated by CoffeeScript 2.3.1
(function() {
  var Category, Page, PageFactory, date, matter;

  ({PageFactory} = require("./PageFactory"));

  ({Page, Category} = require("../model"));

  date = new Date("Jun 05 2018 00:00 UTC");

  matter = function(arg) {
    return {date, ...arg};
  };

  describe("PageFactory", function() {
    var categoriesCategoryMatter, categoriesMatter, categoryMatter, collection, fullMatter, preconditionTests, roleTests, sourceFile, tagsMatter, testedFactory;
    sourceFile = {
      name: "test-page",
      path: "./_posts/test.md"
    };
    collection = "posts";
    testedFactory = null;
    beforeEach(function() {
      return testedFactory = new PageFactory;
    });
    preconditionTests = [
      ["{}",
      {},
      "pages['test-page'].date must be a Date; got undefined"],
      [
        "{ date: 'jibberish' }",
        {
          date: 'jibberish'
        },
        "pages['test-page'].date must be a Date; got 'jibberish'"
      ],
      [
        "{ role: 0 }",
        matter({
          role: 0
        }),
        "pages['test-page'].role must be 'page' or 'category' or undefined; got 0"
      ],
      [
        "{ role: 'superhero' }",
        matter({
          role: "superhero"
        }),
        "pages['test-page'].role must be 'page' or 'category' or undefined; got 'superhero'"
      ],
      [
        "{ title: true }",
        matter({
          title: true
        }),
        "pages['test-page'].title must be a string or undefined; got true"
      ],
      [
        "{ description: null }",
        matter({
          description: null
        }),
        "pages['test-page'].description must be a string or undefined; got null"
      ],
      [
        "{ permalink: 3.1415 }",
        matter({
          permalink: 3.1415
        }),
        "pages['test-page'].permalink must be a string or undefined; got 3.1415"
      ],
      [
        "{ layout: Infinity }",
        matter({
          layout: 2e308
        }),
        "pages['test-page'].layout must be a string or undefined; got Infinity"
      ],
      [
        "{ image: true }",
        matter({
          image: true
        }),
        "pages['test-page'].image must be a string or undefined; got true"
      ],
      [
        "{ output: 12345 }",
        matter({
          output: 12345
        }),
        "pages['test-page'].output must be a boolean or undefined; got 12345"
      ],
      [
        "{ categories: {} }",
        matter({
          categories: {}
        }),
        "pages['test-page'].categories must be an array or undefined; got {}"
      ],
      [
        "{ categories: [ 0 ] }",
        matter({
          categories: [0]
        }),
        "pages['test-page'].categories[0] must be a string; got 0 or pages['test-page'].categories must be undefined; got [0]"
      ],
      [
        "{ category: function() {} }",
        matter({
          category: function() {}
        }),
        "pages['test-page'].category must be a string or undefined; got function category"
      ],
      [
        "{ tags: 0 }",
        matter({
          tags: 0
        }),
        "pages['test-page'].tags must be an array or undefined; got 0"
      ],
      [
        "{ tags: [ 0 ] }",
        matter({
          tags: [0]
        }),
        "pages['test-page'].tags[0] must be a string; got 0 or pages['test-page'].tags must be undefined; got [0]"
      ],
      [
        "{ feed: 12345 }",
        matter({
          feed: 12345
        }),
        "pages['test-page'].feed must be a boolean or undefined; got 12345"
      ]
    ];
    preconditionTests.forEach(function(params) {
      var arg, argDesc, expectedMessage;
      [argDesc, arg, expectedMessage] = params;
      return it(`throws when calling .create(${argDesc})`, function() {
        return should(function() {
          return testedFactory.create(sourceFile, collection, arg);
        }).throw(expectedMessage);
      });
    });
    roleTests = [[void 0, Page], [null, Page], ["page", Page], ["Page", Page], ["PAGE", Page], ["category", Category], ["Category", Category], ["CATEGORY", Category]];
    roleTests.forEach(function(params) {
      var ExpectedPrototype, role;
      [role, ExpectedPrototype] = params;
      return describe(`when calling .create(${JSON.stringify({role})}`, function() {
        var result;
        result = null;
        beforeEach(function() {
          return result = testedFactory.create(sourceFile, collection, matter({role}));
        });
        return it(`returns instance of ${ExpectedPrototype.name}`, function() {
          return result.should.be.instanceOf(ExpectedPrototype);
        });
      });
    });
    describe(`when calling .crate({ date: '${date}' })`, function() {
      var result;
      result = null;
      beforeEach(function() {
        return result = testedFactory.create(sourceFile, collection, matter());
      });
      it("contains given date", function() {
        return result.timestamp.should.equal(1528156800000);
      });
      it("contains title generated from file name", function() {
        return result.title.should.equal("Test page");
      });
      it("contains url generated from title", function() {
        return result.url.should.equal("/test-page");
      });
      it("contains empty description", function() {
        return result.description.should.equal("");
      });
      it("contains layout 'default'", function() {
        return result.layout.should.equal("default");
      });
      it("contains output=true", function() {
        return result.output.should.equal(true);
      });
      it("contains feed=true", function() {
        return result.feed.should.equal(true);
      });
      it("contains no categories", function() {
        return result.categories.should.eql([]);
      });
      return it("contains no tags", function() {
        return result.tags.should.eql([]);
      });
    });
    fullMatter = {
      permalink: '/link',
      title: "Title",
      description: "Full defined page",
      layout: "Custom",
      output: false,
      feed: false
    };
    describe(`when calling .create(${JSON.stringify(fullMatter)})`, function() {
      var result;
      result = null;
      beforeEach(function() {
        return result = testedFactory.create(sourceFile, collection, matter(fullMatter));
      });
      it("contains given title", function() {
        return result.title.should.equal(fullMatter.title);
      });
      it("contains given url", function() {
        return result.url.should.equal(fullMatter.permalink);
      });
      it("contains given description", function() {
        return result.description.should.equal(fullMatter.description);
      });
      it("contains given layout", function() {
        return result.layout.should.equal(fullMatter.layout);
      });
      it("contains given output", function() {
        return result.output.should.equal(fullMatter.output);
      });
      return it("contains given feed", function() {
        return result.feed.should.equal(fullMatter.feed);
      });
    });
    tagsMatter = {
      tags: ['a', 'b', 'c']
    };
    describe(`when calling .create(${JSON.stringify(tagsMatter)})`, function() {
      var result;
      result = null;
      beforeEach(function() {
        return result = testedFactory.create(sourceFile, collection, matter(tagsMatter));
      });
      return it("contains given tags", function() {
        return result.tags.should.eql(tagsMatter.tags);
      });
    });
    categoriesMatter = {
      categories: ['a', 'b', 'c']
    };
    describe(`when calling .create(${JSON.stringify(categoriesMatter)})`, function() {
      var result;
      result = null;
      beforeEach(function() {
        return result = testedFactory.create(sourceFile, collection, matter(categoriesMatter));
      });
      return it("contains given categories", function() {
        return result.categories.should.eql(categoriesMatter.categories);
      });
    });
    categoryMatter = {
      category: 'a'
    };
    describe(`when calling .crate(${JSON.stringify(categoryMatter)})`, function() {
      var result;
      result = null;
      beforeEach(function() {
        return result = testedFactory.create(sourceFile, collection, matter(categoryMatter));
      });
      return it("contains given categories", function() {
        return result.categories.should.eql(['a']);
      });
    });
    categoriesCategoryMatter = {
      categories: ['a', 'b', 'c'],
      category: 'd'
    };
    return describe(`when calling .create(${JSON.stringify(categoriesCategoryMatter)})`, function() {
      var result;
      result = null;
      beforeEach(function() {
        return result = testedFactory.create(sourceFile, collection, matter(categoriesCategoryMatter));
      });
      return it("contains given categories", function() {
        return result.categories.should.eql(['a', 'b', 'c', 'd']);
      });
    });
  });

}).call(this);

//# sourceMappingURL=PageFactory.spec.js.map
