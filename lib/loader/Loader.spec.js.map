{
  "version": 3,
  "file": "Loader.spec.js",
  "sourceRoot": "../..",
  "sources": [
    "src/loader/Loader.spec.coffee"
  ],
  "names": [],
  "mappings": ";AACA;AAAA,MAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAAA;;EAAA,KAAA,GAAQ,OAAA,CAAQ,OAAR;;EACR,CAAA,CAAE,WAAF,CAAA,GAAkB,OAAA,CAAQ,cAAR,CAAlB;;EAEA,CAAA,CAAE,MAAF,CAAA,GAAa,OAAA,CAAQ,UAAR,CAAb;;EACA,CAAA,CAAE,MAAF,EAAU,OAAV,EAAmB,IAAnB,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EAEA,QAAA,CAAS,QAAT,EAAmB,QAAA,CAAA,CAAA;AACjB,QAAA,MAAA,EAAA,KAAA,EAAA,SAAA,EAAA,OAAA,EAAA;IAAA,MAAA,GACE;MAAA,KAAA,EAAO,MAAP;MACA,QAAA,EAAU,KADV;MAEA,WAAA,EAAa,EAFb;MAGA,OAAA,EAAS,6BAHT;MAIA,KAAA,EAAO,EAJP;MAKA,MAAA,EAAQ,OALR;MAMA,IAAA,EAAM;IANN;IAOF,KAAA,GACE;MAAA,gBAAA,EACE;QAAA,IAAA,EAAM,KAAK,CAAC,IAAN,CAAA;MAAN,CADF;MAEA,WAAA,EACE;QAAA,IAAA,EAAM,KAAK,CAAC,IAAN,CAAA;MAAN,CAHF;MAIA,WAAA,EACE;QAAA,MAAA,EAAQ,KAAK,CAAC,IAAN,CAAA;MAAR;IALF;IAOF,YAAA,GAAe;IACf,SAAA,GAAY;IAEZ,UAAA,CAAW,QAAA,CAAA,CAAA;aACT,YAAA,GAAe,IAAI,MAAJ,CAAW,KAAK,CAAC,gBAAjB,EAAmC,KAAK,CAAC,WAAzC,EAAsD,KAAK,CAAC,WAA5D;IADN,CAAX;IAEA,SAAA,CAAU,QAAA,CAAA,CAAA;MACR,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAA5B,CAAA;MACA,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAA5B,CAAA;MACA,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,aAAvB,CAAA;MACA,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,YAAvB,CAAA;MACA,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,aAAzB,CAAA;aACA,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,YAAzB,CAAA;IANQ,CAAV;IAQA,OAAA,GACE;MAAA,GAAA,EAAK,MAAL;MACA,IAAA,EAAM;IADN;IAGF,QAAA,CAAS,sCAAT,EAAiD,QAAA,CAAA,CAAA;AAC/C,UAAA;MAAA,MAAA,GACE;QAAA,OAAA,EAAS,EAAT;QACA,QAAA,EAAU,EADV;QAEA,WAAA,EAAa,CAAA;MAFb;MAIF,UAAA,CAAW,QAAA,CAAA,CAAA;eACT,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAA5B,CAAoC,WAAW,CAAC,OAAZ,CAAoB,MAApB,CAApC;MADS,CAAX;aAGA,EAAA,CAAG,2DAAH,EAAgE,QAAA,CAAA,CAAA;eAC9D,YAAY,CAAC,IAAb,CAAkB,MAAlB,CACE,CAAC,IADH,CAEI,QAAA,CAAC,MAAD,CAAA;UACE,MAAM,IAAI,KAAJ,CAAU,oBAAV;QADR,CAFJ,EAII,QAAA,CAAC,KAAD,CAAA;iBACE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAArB,CAAyB,6DAAzB;QADF,CAJJ;MAD8D,CAAhE;IAT+C,CAAjD;IAkBA,QAAA,CAAS,2DAAT,EAAsE,QAAA,CAAA,CAAA;AACpE,UAAA;MAAA,MAAA,GACE;QAAA,OAAA,EAAS,EAAT;QACA,QAAA,EAAU,EADV;QAEA,WAAA,EAAa;UACX,KAAA,EAAO;YACL;cACE,IAAA,EAAM,KADR;cAEE,IAAA,EAAM;YAFR,CADK;;QADI;MAFb;MAWF,UAAA,CAAW,MAAA,QAAA,CAAA,CAAA;QACT,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAA5B,CAAoC,WAAW,CAAC,OAAZ,CAAoB,MAApB,CAApC;QACA,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAvB,CAA+B,WAAW,CAAC,OAAZ,CAAoB,CAAA,CAApB,CAA/B;QACA,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,OAAzB,CAAiC,OAAjC;eACA,SAAA,GAAY,CAAA,MAAM,YAAY,CAAC,IAAb,CAAkB,MAAlB,CAAN;MAJH,CAAX;aAMA,EAAA,CAAG,0CAAH,EAA+C,QAAA,CAAA,CAAA;QAC7C,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,GAAzB,CAA6B,CAAA,CAA7B;QACA,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,GAA1B,CAA8B,CAAA,CAA9B;QACA,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,GAAvB,CAA2B;UACzB,MAAA,EAAQ;QADiB,CAA3B;QAGA,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,GAA5B,CAAgC,CAAA,CAAhC;QACA,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAtB,CAA0B,CAAA,CAA1B;eACA,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,GAAxB,CAA4B,MAA5B;MAR6C,CAA/C;IAnBoE,CAAtE;IA6BA,QAAA,CAAS,qDAAT,EAAgE,QAAA,CAAA,CAAA;AAC9D,UAAA;MAAA,MAAA,GACE;QAAA,OAAA,EAAS;UACP;YAAA,IAAA,EAAM,SAAN;YACA,IAAA,EAAM;UADN,CADO;SAAT;QAIA,QAAA,EAAU,EAJV;QAKA,WAAA,EAAa;UACX,KAAA,EAAO;YACL;cACE,IAAA,EAAM,KADR;cAEE,IAAA,EAAM;YAFR,CADK;;QADI;MALb;MAcF,UAAA,CAAW,MAAA,QAAA,CAAA,CAAA;QACT,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAA5B,CAAoC,WAAW,CAAC,OAAZ,CAAoB,MAApB,CAApC;QACA,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAvB,CAA+B,WAAW,CAAC,OAAZ,CAAoB,CAAA,CAApB,CAA/B;QACA,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,OAAzB,CAAiC,OAAjC;eACA,SAAA,GAAY,CAAA,MAAM,YAAY,CAAC,IAAb,CAAkB,MAAlB,CAAN;MAJH,CAAX;aAMA,EAAA,CAAG,8CAAH,EAAmD,QAAA,CAAA,CAAA;QACjD,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,OAAtB,CAA8B,CAAC,MAAM,CAAC,IAAI,CAAC,MAA3C,CAAkD,CAAlD;eACA,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAjC,CAAqC,IAAI,MAAJ,CAAW,SAAX,EAAsB,uBAAtB,CAArC;MAFiD,CAAnD;IAtB8D,CAAhE;IA0BA,QAAA,CAAS,sDAAT,EAAiE,QAAA,CAAA,CAAA;AAC/D,UAAA;MAAA,MAAA,GACE;QAAA,OAAA,EAAS,EAAT;QAEA,QAAA,EAAU;UACR;YAAA,IAAA,EAAM,MAAN;YACA,IAAA,EAAM;UADN,CADQ;SAFV;QAMA,WAAA,EAAa;UACX,KAAA,EAAO;YACL;cACE,IAAA,EAAM,KADR;cAEE,IAAA,EAAM;YAFR,CADK;;QADI;MANb;MAeF,UAAA,CAAW,MAAA,QAAA,CAAA,CAAA;QACT,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAA5B,CAAoC,WAAW,CAAC,OAAZ,CAAoB,MAApB,CAApC;QACA,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAvB,CAA+B,WAAW,CAAC,OAAZ,CAAoB,CAAA,CAApB,CAA/B;QACA,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,OAAzB,CAAiC,OAAjC;eACA,SAAA,GAAY,CAAA,MAAM,YAAY,CAAC,IAAb,CAAkB,MAAlB,CAAN;MAJH,CAAX;aAMA,EAAA,CAAG,+CAAH,EAAoD,QAAA,CAAA,CAAA;QAClD,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,QAAtB,CAA+B,CAAC,MAAM,CAAC,IAAI,CAAC,MAA5C,CAAmD,CAAnD;eACA,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAA/B,CAAmC,IAAI,OAAJ,CAAY,MAAZ,EAAoB,qBAApB,CAAnC;MAFkD,CAApD;IAvB+D,CAAjE;WA2BA,QAAA,CAAS,kDAAT,EAA6D,QAAA,CAAA,CAAA;AAC3D,UAAA,aAAA,EAAA,gBAAA,EAAA,UAAA,EAAA;MAAA,UAAA,GACE;QAAA,IAAA,EAAM,aAAN;QACA,IAAA,EAAM;MADN;MAEF,MAAA,GACE;QAAA,OAAA,EAAS,EAAT;QAEA,QAAA,EAAU,EAFV;QAIA,WAAA,EACE;UAAA,KAAA,EAAO,CACL,UADK;QAAP;MALF;MAQF,aAAA,GAAgB;MAChB,gBAAA,GAAmB;MAEnB,UAAA,CAAW,QAAA,CAAC,GAAD,CAAA;QACT,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAA5B,CAAoC,WAAW,CAAC,OAAZ,CAAoB,MAApB,CAApC;QACA,aAAA,GAAgB,IAAI;QACpB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAvB,CAA+B,aAA/B;QACA,gBAAA,GAAmB,YAAY,CAAC,IAAb,CAAkB,MAAlB;eACnB,YAAA,CAAa,GAAb;MALS,CAAX;MAOA,EAAA,CAAG,6BAAH,EAAkC,QAAA,CAAA,CAAA;eAChC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAnC,CAA6C,CAA7C,CACE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,UADjB,CAC4B,UAD5B;MADgC,CAAlC;aAIA,QAAA,CAAS,yCAAT,EAAoD,QAAA,CAAA,CAAA;AAClD,YAAA,MAAA,EAAA;QAAA,MAAA,GACE;UAAA,KAAA,EAAO,eAAP;UACA,WAAA,EAAa;QADb;QAEF,IAAA,GAAO,IAAI,IAAJ,CACL,cADK,EAEL,eAFK,EAGL,oBAHK,EAIL,IAJK,EAKL,OALK,EAML,SANK,EAOL,wBAPK,EAQL,IARK,EASL,IATK,EAUL,EAVK,EAWL,EAXK,EAYL,CAZK;QAeP,UAAA,CAAW,QAAA,CAAC,GAAD,CAAA;UACT,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,OAAzB,CAAiC,IAAjC;UACA,aAAa,CAAC,OAAd,CAAsB,MAAtB;iBACA,YAAA,CAAa,GAAb;QAHS,CAAX;eAKA,EAAA,CAAG,+BAAH,EAAoC,QAAA,CAAA,CAAA;iBAClC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAArC,CAA+C,CAA/C,CACE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,UADjB,CAC4B,UAD5B,EACwC,OADxC,EACiD,MADjD;QADkC,CAApC;MAxBkD,CAApD;IA3B2D,CAA7D;EAtIiB,CAAnB;AANA",
  "sourcesContent": [
    "\nsinon = require \"sinon\"\n{ FakePromise } = require \"fake-promise\"\n\n{ Loader } = require \"./Loader\"\n{ Layout, Include, Page } = require \"../model\"\n\ndescribe \"Loader\", ->\n  config =\n    title: \"test\"\n    timezone: \"UTC\"\n    collections: []\n    baseUrl: \"http://paramorph.github.io/\"\n    image: \"\"\n    locale: \"en_US\"\n    menu: []\n  mocks =\n    projectStructure:\n      scan: sinon.stub()\n    frontMatter:\n      read: sinon.stub()\n    pageFactory:\n      create: sinon.stub()\n\n  testedLoader = null\n  paramorph = null\n\n  beforeEach ->\n    testedLoader = new Loader mocks.projectStructure, mocks.frontMatter, mocks.pageFactory\n  afterEach ->\n    mocks.projectStructure.scan.resetBehavior()\n    mocks.projectStructure.scan.resetHistory()\n    mocks.frontMatter.read.resetBehavior()\n    mocks.frontMatter.read.resetHistory()\n    mocks.pageFactory.create.resetBehavior()\n    mocks.pageFactory.create.resetHistory()\n\n  tagPage =\n    url: \"/tag\"\n    tags: []\n\n  describe \"when loading empty project structure\", ->\n    struct =\n      layouts: []\n      includes: []\n      collections: {}\n\n    beforeEach ->\n      mocks.projectStructure.scan.returns FakePromise.resolve struct\n\n    it \".load() throws Error with complain about missing tag page\", ->\n      testedLoader.load config\n        .then(\n          (result) ->\n            throw new Error \"expected rejection\"\n          (error) ->\n            error.message.should.eql \"Couldn't find page of url '/tag' (used to render tag pages)\"\n        )\n\n  describe \"when loading a project structure containing only tag page\", ->\n    struct =\n      layouts: []\n      includes: []\n      collections: {\n        pages: [\n          {\n            name: \"tag\"\n            path: \"./_pages/tag.markdown\"\n          }\n        ]\n      }\n\n    beforeEach ->\n      mocks.projectStructure.scan.returns FakePromise.resolve struct\n      mocks.frontMatter.read.returns FakePromise.resolve {}\n      mocks.pageFactory.create.returns tagPage\n      paramorph = await testedLoader.load config\n\n    it \".load() returns empty Paramorph instance\", ->\n      paramorph.layouts.should.eql {}\n      paramorph.includes.should.eql {}\n      paramorph.pages.should.eql {\n        \"/tag\": tagPage\n      }\n      paramorph.categories.should.eql {}\n      paramorph.tags.should.eql {}\n      paramorph.config.should.eql config\n\n  describe \"when loading a project structure containing layouts\", ->\n    struct =\n      layouts: [\n        name: \"default\"\n        path: \"./_layouts/default.ts\"\n      ]\n      includes: []\n      collections: {\n        pages: [\n          {\n            name: \"tag\"\n            path: \"./_pages/tag.markdown\"\n          }\n        ]\n      }\n\n    beforeEach ->\n      mocks.projectStructure.scan.returns FakePromise.resolve struct\n      mocks.frontMatter.read.returns FakePromise.resolve {}\n      mocks.pageFactory.create.returns tagPage\n      paramorph = await testedLoader.load config\n\n    it \".load() returns Paramorph containing layouts\", ->\n      Object.keys(paramorph.layouts).should.have.length 1\n      paramorph.layouts.default.should.eql new Layout \"default\", \"./_layouts/default.ts\"\n\n  describe \"when loading a project structure containing includes\", ->\n    struct =\n      layouts: [\n      ]\n      includes: [\n        name: \"Feed\"\n        path: \"./_includes/Feed.ts\"\n      ]\n      collections: {\n        pages: [\n          {\n            name: \"tag\"\n            path: \"./_pages/tag.markdown\"\n          }\n        ]\n      }\n\n    beforeEach ->\n      mocks.projectStructure.scan.returns FakePromise.resolve struct\n      mocks.frontMatter.read.returns FakePromise.resolve {}\n      mocks.pageFactory.create.returns tagPage\n      paramorph = await testedLoader.load config\n\n    it \".load() returns Paramorph containing includes\", ->\n      Object.keys(paramorph.includes).should.have.length 1\n      paramorph.includes.Feed.should.eql new Include \"Feed\", \"./_includes/Feed.ts\"\n\n  describe \"when loading a project structure containing page\", ->\n    postSource =\n      name: \"hello-world\"\n      path: \"./_post/hello-world.md\"\n    struct =\n      layouts: [\n      ]\n      includes: [\n      ]\n      collections:\n        posts: [\n          postSource\n        ]\n    matterPromise = null\n    paramorphPromise = null\n\n    beforeEach (end) ->\n      mocks.projectStructure.scan.returns FakePromise.resolve struct\n      matterPromise = new FakePromise\n      mocks.frontMatter.read.returns matterPromise\n      paramorphPromise = testedLoader.load config\n      setImmediate end\n\n    it \"calls frontMatter.read(...)\", ->\n      mocks.frontMatter.read.should.have.callCount 1\n        .and.have.been.calledWith postSource\n\n    describe \"and after resolving frontMatter promise\", ->\n      matter =\n        title: \"Hello, World!\"\n        description: \"Just a first post.\"\n      page = new Page(\n        \"/hello-world\"\n        \"Hello, World!\"\n        \"Just a first post.\"\n        null\n        \"posts\"\n        \"default\"\n        \"./_post/hello-world.md\"\n        true\n        true\n        []\n        []\n        0\n      )\n\n      beforeEach (end) ->\n        mocks.pageFactory.create.returns page\n        matterPromise.resolve matter\n        setImmediate end\n\n      it 'calls pageFactory.create(...)', ->\n        mocks.pageFactory.create.should.have.callCount 1\n          .and.have.been.calledWith postSource, \"posts\", matter\n\n"
  ]
}