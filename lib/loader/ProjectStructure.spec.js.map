{
  "version": 3,
  "file": "ProjectStructure.spec.js",
  "sourceRoot": "../..",
  "sources": [
    "src/loader/ProjectStructure.spec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "FakeFileSystem = require \"../platform/fake/FileSystem\"\n  .FakeFileSystem\nProjectStructure = require \"./ProjectStructure\"\n  .ProjectStructure\n\ndescribe \"ProjectStructure\", ->\n  fs = null\n  testedStructure = null\n\n  beforeEach ->\n    fs = new FakeFileSystem\n    testedStructure = new ProjectStructure fs\n    fs.createDir \".\"\n\n  describe \"given empty project folder\", ->\n    beforeEach ->\n      fs.createDir \".\"\n\n    it \".scan() complains about lack of _layouts folder\", ->\n      testedStructure.scan collections: {}\n        .then (result) ->\n          throw new Error \"expected an error; got result #{result}\"\n        .catch (err) ->\n          err.should.eql new Error \"couldn't find ./_layouts folder\"\n\n  describe \"given project with only _layouts folder\", ->\n    beforeEach ->\n      fs.createDir \".\"\n      fs.createDir \"./_layouts\"\n\n    it \".scan() complains about lack of _includes folder\", ->\n      testedStructure.scan collections: {}\n        .then (result) ->\n          throw new Error \"expected an error; got result #{result}\"\n        .catch (err) ->\n          err.should.eql new Error \"couldn't find ./_includes folder\"\n\n  describe \"given project with empty _layouts and _includes folders\", ->\n    beforeEach ->\n      fs.createDir \".\"\n      fs.createDir \"./_layouts\"\n      fs.createDir \"./_includes\"\n\n    it \".scan() produces empty specialDirs\", ->\n      testedStructure.scan collections: {}\n        .then (result) ->\n          result.should.eql layouts: [], includes: [], collections: $root: []\n\n    it \".scan() doesn't throw when encountering collection without its folder\", ->\n      testedStructure.scan collections: nonexistent: {}\n\n    [ 'layouts', 'includes', '$root' ].forEach (forbiddenName) ->\n      it \".scan() complains about collection named '#{forbiddenName}'\", ->\n        collections = {}\n        collections[forbiddenName] = {}\n        testedStructure.scan { collections }\n          .then (result) ->\n            throw new Error \"expected an error; got result #{result}\"\n          .catch (err) ->\n            err.should.eql new Error \"collection name forbidden: '#{forbiddenName}'\"\n\n  describe \"given project with some layout files\", ->\n    beforeEach ->\n      fs.createDir \".\"\n      fs.createDir \"./_layouts\"\n      fs.createDir \"./_includes\"\n\n      fs.writeFile \"./_layouts/js.js\"\n      fs.writeFile \"./_layouts/ts.ts\"\n      fs.createDir \"./_layouts/sub-js\"\n      fs.writeFile \"./_layouts/sub-js/index.js\"\n      fs.createDir \"./_layouts/sub-ts\"\n      fs.writeFile \"./_layouts/sub-ts/index.ts\"\n\n    it \".scan() produces specialDirs containing all layouts\", ->\n      expectedLayouts = [\n        { name: \"js\", path: \"./_layouts/js.js\" }\n        { name: \"sub-js\", path: \"./_layouts/sub-js/index.js\" }\n        { name: \"sub-ts\", path: \"./_layouts/sub-ts/index.ts\" }\n        { name: \"ts\", path: \"./_layouts/ts.ts\" }\n      ]\n      testedStructure.scan collections: {}\n        .then (result) ->\n          result.should.eql layouts: expectedLayouts, includes: [], collections: $root: []\n\n  describe \"given project with layout of 2 index files\", ->\n    beforeEach ->\n      fs.createDir \".\"\n      fs.createDir \"./_layouts\"\n      fs.createDir \"./_includes\"\n\n      fs.createDir \"./_layouts/sub\"\n      fs.writeFile \"./_layouts/sub/index.js\"\n      fs.writeFile \"./_layouts/sub/index.ts\"\n\n    it \".scan() produces specialDirs containing all layouts\", ->\n      testedStructure.scan collections: {}\n        .then (result) ->\n          throw new Error \"expected an error; got result #{result}\"\n        .catch (err) ->\n          err.should.eql new Error(\n            \"multiple index files found in subfolder: ./_layouts/sub: index.js,index.ts\"\n          )\n\n  describe \"given project with some includes\", ->\n    beforeEach ->\n      fs.createDir \".\"\n      fs.createDir \"./_layouts\"\n      fs.createDir \"./_includes\"\n\n      fs.writeFile \"./_includes/js.js\"\n      fs.writeFile \"./_includes/ts.ts\"\n      fs.createDir \"./_includes/sub-js\"\n      fs.writeFile \"./_includes/sub-js/index.js\"\n      fs.createDir \"./_includes/sub-ts\"\n      fs.writeFile \"./_includes/sub-ts/index.ts\"\n\n    it \".scan() produces specialDirs containing all includes\", ->\n      expectedIncludes = [\n        { name: \"js\", path: \"./_includes/js.js\" }\n        { name: \"sub-js\", path: \"./_includes/sub-js/index.js\" }\n        { name: \"sub-ts\", path: \"./_includes/sub-ts/index.ts\" }\n        { name: \"ts\", path: \"./_includes/ts.ts\" }\n      ]\n      testedStructure.scan collections: {}\n        .then (result) ->\n          result.should.eql layouts: [], includes: expectedIncludes, collections: $root: []\n\n  describe \"given project with some markdown files in root folder\", ->\n    beforeEach ->\n      fs.createDir \".\"\n      fs.createDir \"./_layouts\"\n      fs.createDir \"./_includes\"\n\n      fs.writeFile \"./index.markdown\"\n      fs.writeFile \"./sitemap.markdown\"\n      fs.writeFile \"./about.markdown\"\n      fs.writeFile \"./404.markdown\"\n\n    it \".scan() produces specialDirs containing markdown files in $root collection\", ->\n      expectedFiles = [\n        { name: \"404\", path: \"./404.markdown\" }\n        { name: \"about\", path: \"./about.markdown\" }\n        { name: \"index\", path: \"./index.markdown\" }\n        { name: \"sitemap\", path: \"./sitemap.markdown\" }\n      ]\n      testedStructure.scan collections: {}\n        .then (result) ->\n          result.should.eql layouts: [], includes: [], collections: $root: expectedFiles\n\n  describe \"given project with some markdown files in _posts folder\", ->\n    beforeEach ->\n      fs.createDir \".\"\n      fs.createDir \"./_layouts\"\n      fs.createDir \"./_includes\"\n      fs.createDir \"./_posts\"\n\n      fs.writeFile \"./_posts/2007-06-01-hello-world.markdown\"\n      fs.writeFile \"./_posts/2018-03-21-need-to-blog-more-often.markdown\"\n\n    it \".scan() produces specialDirs containing markdown files in _posts collection\", ->\n      expectedFiles = [\n        {\n          name: \"2007-06-01-hello-world\",\n          path: \"./_posts/2007-06-01-hello-world.markdown\",\n        }\n        {\n          name: \"2018-03-21-need-to-blog-more-often\",\n          path: \"./_posts/2018-03-21-need-to-blog-more-often.markdown\",\n        }\n      ]\n      testedStructure.scan collections: posts: {}\n        .then (result) ->\n          result.should.eql layouts: [], includes: [], collections: $root: [], posts: expectedFiles\n\n"
  ]
}