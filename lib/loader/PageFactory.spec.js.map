{
  "version": 3,
  "file": "PageFactory.spec.js",
  "sourceRoot": "../..",
  "sources": [
    "src/loader/PageFactory.spec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n{ PageFactory } = require \"./PageFactory\"\n{ Page, Category } = require \"../model\"\n\ndate = \"Jun 05 2018 00:00 UTC\"\nmatter = (arg) -> { date, arg... }\n\ndescribe \"PageFactory\", ->\n  sourceFile =\n    name: \"test-page\"\n    path: \"./_posts/test.md\"\n  collection = \"posts\"\n\n  testedFactory = null\n\n  beforeEach ->\n    testedFactory = new PageFactory\n\n  preconditionTests = [\n    [\n      \"{}\"\n      {}\n      \"pages['test-page'].date must be a string; got undefined\"\n    ]\n    [\n      \"{ date: 'jibberish' }\"\n      { date: 'jibberish' }\n      \"pages['test-page'].date must be a valid date; got 'jibberish'\"\n    ]\n    [\n      \"{ role: 0 }\"\n      matter role: 0\n      \"pages['test-page'].role must be 'page' or 'category' or undefined; got 0\"\n    ]\n    [\n      \"{ role: 'superhero' }\"\n      matter role: \"superhero\"\n      \"pages['test-page'].role must be 'page' or 'category' or undefined; got 'superhero'\"\n    ]\n    [\n      \"{ title: true }\"\n      matter title: true\n      \"pages['test-page'].title must be a string or undefined; got true\"\n    ]\n    [\n      \"{ description: null }\"\n      matter description: null\n      \"pages['test-page'].description must be a string or undefined; got null\"\n    ]\n    [\n      \"{ permalink: 3.1415 }\"\n      matter permalink: 3.1415\n      \"pages['test-page'].permalink must be a string or undefined; got 3.1415\"\n    ]\n    [\n      \"{ layout: Infinity }\"\n      matter layout: Infinity\n      \"pages['test-page'].layout must be a string or undefined; got Infinity\"\n    ]\n    [\n      \"{ image: true }\"\n      matter image: true\n      \"pages['test-page'].image must be a string or undefined; got true\"\n    ]\n    [\n      \"{ output: 12345 }\"\n      matter output: 12345\n      \"pages['test-page'].output must be a boolean or undefined; got 12345\"\n    ]\n    [\n      \"{ categories: {} }\"\n      matter categories: {}\n      \"pages['test-page'].categories must be an array or undefined; got {}\"\n    ]\n    [\n      \"{ categories: [ 0 ] }\"\n      matter categories: [ 0 ]\n      \"pages['test-page'].categories[0] must be a string; got 0 or pages['test-page'].categories must be undefined; got [0]\"\n    ]\n    [\n      \"{ category: function() {} }\"\n      matter category: ->\n      \"pages['test-page'].category must be a string or undefined; got function category\"\n    ]\n    [\n      \"{ tags: 0 }\"\n      matter tags: 0\n      \"pages['test-page'].tags must be an array or undefined; got 0\"\n    ]\n    [\n      \"{ tags: [ 0 ] }\"\n      matter tags: [ 0 ]\n      \"pages['test-page'].tags[0] must be a string; got 0 or pages['test-page'].tags must be undefined; got [0]\"\n    ]\n    [\n      \"{ feed: 12345 }\"\n      matter feed: 12345\n      \"pages['test-page'].feed must be a boolean or undefined; got 12345\"\n    ]\n  ]\n\n  preconditionTests.forEach (params) ->\n    [ argDesc, arg, expectedMessage ] = params\n\n    it \"throws when calling .create(#{argDesc})\", ->\n      should -> testedFactory.create sourceFile, collection, arg\n        .throw expectedMessage\n\n  roleTests = [\n    [ undefined, Page ]\n    [ null, Page ]\n    [ \"page\", Page ]\n    [ \"Page\", Page ]\n    [ \"PAGE\", Page ]\n    [ \"category\", Category ]\n    [ \"Category\", Category ]\n    [ \"CATEGORY\", Category ]\n  ]\n\n  roleTests.forEach (params) ->\n    [ role, ExpectedPrototype ] = params\n\n    describe \"when calling .create(#{JSON.stringify { role }}\", ->\n      result = null\n\n      beforeEach ->\n        result = testedFactory.create sourceFile, collection, matter { role }\n\n      it \"returns instance of #{ExpectedPrototype.name}\", ->\n        result.should.be.instanceOf ExpectedPrototype\n\n  describe \"when calling .crate({ date: '#{date}' })\", ->\n    result = null\n\n    beforeEach ->\n      result = testedFactory.create sourceFile, collection, matter()\n\n    it \"contains title generated from file name\", ->\n      result.title.should.equal \"Test page\"\n    it \"contains url generated from title\", ->\n      result.url.should.equal \"/test-page\"\n    it \"contains empty description\", ->\n      result.description.should.equal \"\"\n    it \"contains layout 'default'\", ->\n      result.layout.should.equal \"default\"\n"
  ]
}