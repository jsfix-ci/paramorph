
import { Paramorph, Layout, Include, Post, Collection, Category, Tag } from '../../model';

export function sitemap(paramorph : Paramorph) : string {
  const collections = Object.keys(paramorph.collections)
    .map(key => paramorph.collections[key] as Collection);

  const posts : Post[] = [];
  const categories : Category[] = [];
  const tags : Tag[] = [];

  const indexPage = paramorph.posts['/'] as Post;

  const all = Object.keys(paramorph.posts)
    .map(key => paramorph.posts[key] as Post)
    .filter(post => post.output);
  all.splice(all.indexOf(indexPage), 1);

  all.forEach(post => {
    switch (post.constructor) {
      case Post:
        posts.push(post);
        return;
      case Category:
        categories.push(post as Category);
        return;
      case Tag:
        tags.push(post as Tag);
        return;
      default:
        console.warn(`found a post of unknown type: ${post.constructor}`);
        posts.push(post);
        return;
    }
  });

  function render(post : Post, changefreq : string, priority : string) {
    return `  <url>
    <loc>${paramorph.config.baseUrl}${post.url}</loc>
    <changefreq>${changefreq}</changefreq>
    <priority>${priority}</priority>
  </url>`;
  }

  return `<?xml version="1.0" encoding="UTF-8" ?>
<!-- GENERATED BY PARAMORPH -->
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">${
posts.map(post => render(post, 'yearly', '0.7')).join('\n') }
${ tags.map(tag => render(tag, 'daily', '0.8')).join('\n') }
${ categories.map(category => render(category, 'daily', '0.9')).join('\n') }
${ render(indexPage, 'always', '1.0') }
</urlset>
`;
}

export default sitemap;

